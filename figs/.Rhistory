lambdaV <- seq(0, 1, .01)
for (i in lambdaV) {
O <- optim(par=c(1,1), fn=pareto, a1=a1, a2=a2, sigma=sigma, alpha=alpha, L=L, lambda=i, lower=c(1,1), method="L-BFGS-B")
pFrontier1 <- c(pFrontier1, O$par[1])
pFrontier2 <- c(pFrontier2, O$par[2])
}
# indifference curves from trade war
iso <- function(tau_i, tau_j, a, sigma, alpha, L, tauStar_i, tauStar_j) {
return(abs(G(tau_i, tau_j, a, sigma, alpha, L) - G(tauStar_i, tauStar_j, a, sigma, alpha, L)))
}
G(tauStar1, tauStar2, a1, sigma, alpha, L)
iso1 <- c()
iso2 <- c()
for (i in pFrontier2) {
O <- optim(par=1, fn=iso, tau_j=i, a=a1, sigma=sigma, alpha=alpha, L=L, tauStar_i=tauStar1, tauStar_j=tauStar2, lower=1, upper=tauStar1, method="Brent")
iso1 <- c(iso1, O$par)
}
for (i in pFrontier1) {
O <- optim(par=1, fn=iso, tau_j=i, a=a2, sigma=sigma, alpha=alpha, L=L, tauStar_i=tauStar2, tauStar_j=tauStar1, lower=1, upper=tauStar2, method="Brent")
iso2 <- c(iso2, O$par)
}
pfData <- data.frame(pFrontier1, pFrontier2, iso1, iso2)
barPlot <- ggplot(pfData, aes(x=pFrontier1, y=pFrontier2)) +
geom_line(size=1.5) +
# geom_line(y=iso2, lty=2) +
# geom_line(aes(x=iso1, y=pFrontier2), lty=2) +
annotate("text", x=pFrontier1[length(pFrontier1)/2] + .1, y=pFrontier2[length(pFrontier2)/2],
label=TeX("$\\lambda G_i + (1 - \\lambda) G_j$"), family="Palatino", size=5) +
annotate("text", x=pFrontier1[length(pFrontier1)] - .04, y=pFrontier2[length(pFrontier2)] + .025,
label=TeX("$\\lambda = 1$"), family="Palatino", size=5) +
annotate("text", x=pFrontier1[1] + .04, y=pFrontier2[1] - .025,
label=TeX("$\\lambda = 0$"), family="Palatino", size=5) +
geom_vline(xintercept=max(pFrontier1), size=1) +
geom_hline(yintercept=max(pFrontier2), size=1) +
scale_x_continuous(expand = c(0, 0), breaks=c(1, tauStar1), labels=c(1, TeX("$\\tau_i^{*}(a_i)$"))) +
scale_y_continuous(expand = c(0, 0), breaks=c(1, tauStar2), labels=c(1, TeX("$\\tau_j^{*}(a_j)$"))) +
theme_classic() +
theme(text=element_text(family="Palatino"), axis.text=element_text(size=12),
axis.ticks=element_blank(), axis.title=element_blank(),
plot.margin=unit(c(.5,.5,.5,.5), "cm"), aspect.ratio=1) +
labs(title="Bargaining Space")
barPlot
library(tidyverse)
library(latex2exp)
path <- getwd() %>% strsplit("/")
lastPath <- path[[1]][length(path[[1]])]
if (lastPath == "figs") {
source("source.R")
source("params.R")
}
a1 <- a2 <- 1
tauStar1 <- optim(par=1, fn=G, tau_j=1, a=a1, sigma=sigma, alpha=alpha, L=L, method="Brent", lower=1, upper=100, control=list(fnscale=-1))$par
tauStar2 <- optim(par=1, fn=G, tau_j=1, a=a2, sigma=sigma, alpha=alpha, L=L, method="Brent", lower=1, upper=100, control=list(fnscale=-1))$par
pareto <- function(taus, a1, a2, sigma, n, alpha, L, lambda) {
return(-1*(lambda * G(taus[1], taus[2], a1, sigma, alpha, L) + (1 - lambda) * G(taus[2], taus[1], a2, sigma, alpha, L)))
}
pFrontier1 <- c()
pFrontier2 <- c()
lambdaV <- seq(0, 1, .01)
for (i in lambdaV) {
O <- optim(par=c(1,1), fn=pareto, a1=a1, a2=a2, sigma=sigma, alpha=alpha, L=L, lambda=i, lower=c(1,1), method="L-BFGS-B")
pFrontier1 <- c(pFrontier1, O$par[1])
pFrontier2 <- c(pFrontier2, O$par[2])
}
# indifference curves from trade war
iso <- function(tau_i, tau_j, a, sigma, alpha, L, tauStar_i, tauStar_j) {
return(abs(G(tau_i, tau_j, a, sigma, alpha, L) - G(tauStar_i, tauStar_j, a, sigma, alpha, L)))
}
G(tauStar1, tauStar2, a1, sigma, alpha, L)
iso1 <- c()
iso2 <- c()
for (i in pFrontier2) {
O <- optim(par=1, fn=iso, tau_j=i, a=a1, sigma=sigma, alpha=alpha, L=L, tauStar_i=tauStar1, tauStar_j=tauStar2, lower=1, upper=tauStar1, method="Brent")
iso1 <- c(iso1, O$par)
}
for (i in pFrontier1) {
O <- optim(par=1, fn=iso, tau_j=i, a=a2, sigma=sigma, alpha=alpha, L=L, tauStar_i=tauStar2, tauStar_j=tauStar1, lower=1, upper=tauStar2, method="Brent")
iso2 <- c(iso2, O$par)
}
pfData <- data.frame(pFrontier1, pFrontier2, iso1, iso2)
barPlot <- ggplot(pfData, aes(x=pFrontier1, y=pFrontier2)) +
geom_line(size=1.5) +
# geom_line(y=iso2, lty=2) +
# geom_line(aes(x=iso1, y=pFrontier2), lty=2) +
annotate("text", x=pFrontier1[length(pFrontier1)/2] + .1, y=pFrontier2[length(pFrontier2)/2],
label=TeX("$\\lambda G_i + (1 - \\lambda) G_j$"), family="Palatino", size=5) +
annotate("text", x=pFrontier1[length(pFrontier1)] - .04, y=pFrontier2[length(pFrontier2)] + .025,
label=TeX("$\\lambda = 1$"), family="Palatino", size=5) +
annotate("text", x=pFrontier1[1] + .04, y=pFrontier2[1] - .025,
label=TeX("$\\lambda = 0$"), family="Palatino", size=5) +
geom_vline(xintercept=max(pFrontier1), size=1) +
geom_hline(yintercept=max(pFrontier2), size=1) +
scale_x_continuous(expand = c(0, 0), breaks=c(1, tauStar1), labels=c(1, TeX("$\\tau_i^{*}(a_i)$"))) +
scale_y_continuous(expand = c(0, 0), breaks=c(1, tauStar2), labels=c(1, TeX("$\\tau_j^{*}(a_j)$"))) +
theme_classic() +
theme(text=element_text(family="Palatino"), axis.text=element_text(size=12),
axis.ticks=element_blank(), axis.title=element_blank(),
plot.margin=unit(c(.5,.5,.5,.5), "cm"), aspect.ratio=1) +
labs(title="Bargaining Space")
barPlot
library(tidyverse)
library(latex2exp)
path <- getwd() %>% strsplit("/")
lastPath <- path[[1]][length(path[[1]])]
if (lastPath == "figs") {
source("source.R")
source("params.R")
}
a1 <- a2 <- 10
tauStar1 <- optim(par=1, fn=G, tau_j=1, a=a1, sigma=sigma, alpha=alpha, L=L, method="Brent", lower=1, upper=100, control=list(fnscale=-1))$par
tauStar2 <- optim(par=1, fn=G, tau_j=1, a=a2, sigma=sigma, alpha=alpha, L=L, method="Brent", lower=1, upper=100, control=list(fnscale=-1))$par
pareto <- function(taus, a1, a2, sigma, n, alpha, L, lambda) {
return(-1*(lambda * G(taus[1], taus[2], a1, sigma, alpha, L) + (1 - lambda) * G(taus[2], taus[1], a2, sigma, alpha, L)))
}
pFrontier1 <- c()
pFrontier2 <- c()
lambdaV <- seq(0, 1, .01)
for (i in lambdaV) {
O <- optim(par=c(1,1), fn=pareto, a1=a1, a2=a2, sigma=sigma, alpha=alpha, L=L, lambda=i, lower=c(1,1), method="L-BFGS-B")
pFrontier1 <- c(pFrontier1, O$par[1])
pFrontier2 <- c(pFrontier2, O$par[2])
}
# indifference curves from trade war
iso <- function(tau_i, tau_j, a, sigma, alpha, L, tauStar_i, tauStar_j) {
return(abs(G(tau_i, tau_j, a, sigma, alpha, L) - G(tauStar_i, tauStar_j, a, sigma, alpha, L)))
}
G(tauStar1, tauStar2, a1, sigma, alpha, L)
iso1 <- c()
iso2 <- c()
for (i in pFrontier2) {
O <- optim(par=1, fn=iso, tau_j=i, a=a1, sigma=sigma, alpha=alpha, L=L, tauStar_i=tauStar1, tauStar_j=tauStar2, lower=1, upper=tauStar1, method="Brent")
iso1 <- c(iso1, O$par)
}
for (i in pFrontier1) {
O <- optim(par=1, fn=iso, tau_j=i, a=a2, sigma=sigma, alpha=alpha, L=L, tauStar_i=tauStar2, tauStar_j=tauStar1, lower=1, upper=tauStar2, method="Brent")
iso2 <- c(iso2, O$par)
}
pfData <- data.frame(pFrontier1, pFrontier2, iso1, iso2)
barPlot <- ggplot(pfData, aes(x=pFrontier1, y=pFrontier2)) +
geom_line(size=1.5) +
# geom_line(y=iso2, lty=2) +
# geom_line(aes(x=iso1, y=pFrontier2), lty=2) +
annotate("text", x=pFrontier1[length(pFrontier1)/2] + .1, y=pFrontier2[length(pFrontier2)/2],
label=TeX("$\\lambda G_i + (1 - \\lambda) G_j$"), family="Palatino", size=5) +
annotate("text", x=pFrontier1[length(pFrontier1)] - .04, y=pFrontier2[length(pFrontier2)] + .025,
label=TeX("$\\lambda = 1$"), family="Palatino", size=5) +
annotate("text", x=pFrontier1[1] + .04, y=pFrontier2[1] - .025,
label=TeX("$\\lambda = 0$"), family="Palatino", size=5) +
geom_vline(xintercept=max(pFrontier1), size=1) +
geom_hline(yintercept=max(pFrontier2), size=1) +
scale_x_continuous(expand = c(0, 0), breaks=c(1, tauStar1), labels=c(1, TeX("$\\tau_i^{*}(a_i)$"))) +
scale_y_continuous(expand = c(0, 0), breaks=c(1, tauStar2), labels=c(1, TeX("$\\tau_j^{*}(a_j)$"))) +
theme_classic() +
theme(text=element_text(family="Palatino"), axis.text=element_text(size=12),
axis.ticks=element_blank(), axis.title=element_blank(),
plot.margin=unit(c(.5,.5,.5,.5), "cm"), aspect.ratio=1) +
labs(title="Bargaining Space")
barPlot
pFrontier2
a1 <- a2 <- .5
tauStar1 <- optim(par=1, fn=G, tau_j=1, a=a1, sigma=sigma, alpha=alpha, L=L, method="Brent", lower=1, upper=100, control=list(fnscale=-1))$par
tauStar2 <- optim(par=1, fn=G, tau_j=1, a=a2, sigma=sigma, alpha=alpha, L=L, method="Brent", lower=1, upper=100, control=list(fnscale=-1))$par
pareto <- function(taus, a1, a2, sigma, n, alpha, L, lambda) {
return(-1*(lambda * G(taus[1], taus[2], a1, sigma, alpha, L) + (1 - lambda) * G(taus[2], taus[1], a2, sigma, alpha, L)))
}
pFrontier1 <- c()
pFrontier2 <- c()
lambdaV <- seq(0, 1, .01)
for (i in lambdaV) {
O <- optim(par=c(1,1), fn=pareto, a1=a1, a2=a2, sigma=sigma, alpha=alpha, L=L, lambda=i, lower=c(1,1), method="L-BFGS-B")
pFrontier1 <- c(pFrontier1, O$par[1])
pFrontier2 <- c(pFrontier2, O$par[2])
}
# indifference curves from trade war
iso <- function(tau_i, tau_j, a, sigma, alpha, L, tauStar_i, tauStar_j) {
return(abs(G(tau_i, tau_j, a, sigma, alpha, L) - G(tauStar_i, tauStar_j, a, sigma, alpha, L)))
}
G(tauStar1, tauStar2, a1, sigma, alpha, L)
iso1 <- c()
iso2 <- c()
for (i in pFrontier2) {
O <- optim(par=1, fn=iso, tau_j=i, a=a1, sigma=sigma, alpha=alpha, L=L, tauStar_i=tauStar1, tauStar_j=tauStar2, lower=1, upper=tauStar1, method="Brent")
iso1 <- c(iso1, O$par)
}
for (i in pFrontier1) {
O <- optim(par=1, fn=iso, tau_j=i, a=a2, sigma=sigma, alpha=alpha, L=L, tauStar_i=tauStar2, tauStar_j=tauStar1, lower=1, upper=tauStar2, method="Brent")
iso2 <- c(iso2, O$par)
}
pfData <- data.frame(pFrontier1, pFrontier2, iso1, iso2)
barPlot <- ggplot(pfData, aes(x=pFrontier1, y=pFrontier2)) +
geom_line(size=1.5) +
# geom_line(y=iso2, lty=2) +
# geom_line(aes(x=iso1, y=pFrontier2), lty=2) +
annotate("text", x=pFrontier1[length(pFrontier1)/2] + .1, y=pFrontier2[length(pFrontier2)/2],
label=TeX("$\\lambda G_i + (1 - \\lambda) G_j$"), family="Palatino", size=5) +
annotate("text", x=pFrontier1[length(pFrontier1)] - .04, y=pFrontier2[length(pFrontier2)] + .025,
label=TeX("$\\lambda = 1$"), family="Palatino", size=5) +
annotate("text", x=pFrontier1[1] + .04, y=pFrontier2[1] - .025,
label=TeX("$\\lambda = 0$"), family="Palatino", size=5) +
geom_vline(xintercept=max(pFrontier1), size=1) +
geom_hline(yintercept=max(pFrontier2), size=1) +
scale_x_continuous(expand = c(0, 0), breaks=c(1, tauStar1), labels=c(1, TeX("$\\tau_i^{*}(a_i)$"))) +
scale_y_continuous(expand = c(0, 0), breaks=c(1, tauStar2), labels=c(1, TeX("$\\tau_j^{*}(a_j)$"))) +
theme_classic() +
theme(text=element_text(family="Palatino"), axis.text=element_text(size=12),
axis.ticks=element_blank(), axis.title=element_blank(),
plot.margin=unit(c(.5,.5,.5,.5), "cm"), aspect.ratio=1) +
labs(title="Bargaining Space")
barPlot
G(tauStar1, tauStar2, a1, sigma, alpha, L)
tauStar2
tauStar1
a1 <- a2 <- 1
tauStar1 <- optim(par=1, fn=G, tau_j=1, a=a1, sigma=sigma, alpha=alpha, L=L, method="Brent", lower=1, upper=100, control=list(fnscale=-1))$par
tauStar2 <- optim(par=1, fn=G, tau_j=1, a=a2, sigma=sigma, alpha=alpha, L=L, method="Brent", lower=1, upper=100, control=list(fnscale=-1))$par
tauStar1
tauStar2
library(tidyverse)
library(latex2exp)
path <- getwd() %>% strsplit("/")
lastPath <- path[[1]][length(path[[1]])]
if (lastPath == "figs") {
source("source.R")
source("params.R")
}
a1 <- a2 <- 1
tauStar1 <- optim(par=1, fn=G, tau_j=1, a=a1, sigma=sigma, alpha=alpha, L=L, method="Brent", lower=1, upper=100, control=list(fnscale=-1))$par
tauStar2 <- optim(par=1, fn=G, tau_j=1, a=a2, sigma=sigma, alpha=alpha, L=L, method="Brent", lower=1, upper=100, control=list(fnscale=-1))$par
pareto <- function(taus, a1, a2, sigma, n, alpha, L, lambda) {
return(-1*(lambda * G(taus[1], taus[2], a1, sigma, alpha, L) + (1 - lambda) * G(taus[2], taus[1], a2, sigma, alpha, L)))
}
pFrontier1 <- c()
pFrontier2 <- c()
lambdaV <- seq(0, 1, .01)
for (i in lambdaV) {
O <- optim(par=c(1,1), fn=pareto, a1=a1, a2=a2, sigma=sigma, alpha=alpha, L=L, lambda=i, lower=c(1,1), method="L-BFGS-B")
pFrontier1 <- c(pFrontier1, O$par[1])
pFrontier2 <- c(pFrontier2, O$par[2])
}
pFrontier1
pFrontier2
library(tidyverse)
library(latex2exp)
library(reshape2)
library(ggthemes)
path <- getwd() %>% strsplit("/")
lastPath <- path[[1]][length(path[[1]])]
if (lastPath == "figs") {
source("source.R")
source("params.R")
}
a2 <- a1 <- 0
tauStar1 <- optim(par=1, fn=G, tau_j=1, a=a1, sigma=sigma, n=n, alpha=alpha, L=L, method="Brent", lower=1, upper=100, control=list(fnscale=-1))$par
tauStar2 <- optim(par=1, fn=G, tau_j=1, a=a2, sigma=sigma, n=n, alpha=alpha, L=L, method="Brent", lower=1, upper=100, control=list(fnscale=-1))$par
G1min <-  G(1, tauStar2, a1, sigma, alpha, L)
G1max <-  G(tauStar1, 1, a1, sigma, alpha, L)
Gseq <- seq(G1min, G1max, length.out=8)
iso <- function(tau_i, tau_j, a, sigma, alpha, L, Gbar) {
return(abs(G(tau_i, tau_j, a, sigma, alpha, L) - Gbar))
}
top1 <- 2 * (tauStar1 - 1) + 1
top2 <- 2 * (tauStar2 - 1) + 1
tauSeq <- seq(1, top2, by=.001)
isoListL <- list()
isoListR <- list()
tick <- 1
for (i in Gseq) {
isoVecL <- c()
isoVecR <- c()
for (j in tauSeq) {
isoVecL <- c(isoVecL, optim(par=1, fn=iso, tau_j=j, a=a1, sigma=sigma, alpha=alpha, L=L, Gbar=i, lower=1, upper=tauStar1 - .01, method="Brent")$par)
isoVecR <- c(isoVecR, optim(par=1, fn=iso, tau_j=j, a=a1, sigma=sigma, alpha=alpha, L=L, Gbar=i, lower=tauStar1 + .01, upper=top1, method="Brent")$par)
}
isoListL[[tick]] <- isoVecL
isoListR[[tick]] <- isoVecR
tick <- tick + 1
}
isoDataL <- bind_cols(isoListL[seq(2, length(isoListL) - 1)])
isoDataR <- bind_cols(isoListR[seq(2, length(isoListR) - 1)])
isoData <- bind_rows(isoDataL, isoDataR)
isoDataM <- melt(isoData)
isoDataM$value <- ifelse(isoDataM$value < 1.01, NA, isoDataM$value)
isoDataM$value <- ifelse(isoDataM$value > top1 - .0001, NA, isoDataM$value)
isoDataM$variable <- as.numeric(substring(isoDataM$variable, 2))
isoDataM$tau <- rep(tauSeq, length(unique(isoDataM$variable)))
isoDataM$G <- rep(Gseq[seq(2, length(isoListL) - 1)], each=length(tauSeq))
isoDataM <- isoDataM %>% filter(!(value >= tauStar1 - .03 & value <= tauStar1 + .03)) # filter near optimum
# x <- seq(0, 1, length = length(isoDataM$variable %>% unique()))
# colors <- tableau_seq_gradient_pal("Orange-Gold")(x)
isoPlot1 <- ggplot(isoDataM, aes(x=value, y=tau, group=variable, color=variable)) +
scale_x_continuous(limits=c(1, top1), breaks=c(1, tauStar1), labels=c(1, TeX("$\\tau_i^{*}(a_i)$"))) +
scale_y_continuous(limits=c(1, top2), breaks=c(1, tauStar2), labels=c(1, TeX("$\\tau_j^{*}(a_j)$"))) +
theme_classic() +
labs(x=TeX("$\\tau_i$"), y = TeX("$\\tau_j$"), title = "Government Iso-Welfare Curves") +
theme(aspect.ratio=1, text=element_text(family="Palatino"), legend.position = "none")
isoPlot2 <- isoPlot1 +
geom_line() +
annotate("segment", x=top1 - .1, xend = top1 - .1, y = 1.5, yend = 1.3, arrow = arrow(length = unit(1, "lines"))) +
annotate("text", x = top1-.3, y = 1.4, label = "Increasing \niso-welfare", family="Palatino") +
scale_color_gradient_tableau(palette="Blue")
isoPlot <- isoPlot2
library(tidyverse)
library(latex2exp)
library(reshape2)
library(ggthemes)
path <- getwd() %>% strsplit("/")
lastPath <- path[[1]][length(path[[1]])]
if (lastPath == "figs") {
source("source.R")
source("params.R")
}
a2 <- a1 <- 0
tauStar1 <- optim(par=1, fn=G, tau_j=1, a=a1, sigma=sigma, alpha=alpha, L=L, method="Brent", lower=1, upper=100, control=list(fnscale=-1))$par
tauStar2 <- optim(par=1, fn=G, tau_j=1, a=a2, sigma=sigma, alpha=alpha, L=L, method="Brent", lower=1, upper=100, control=list(fnscale=-1))$par
G1min <-  G(1, tauStar2, a1, sigma, alpha, L)
G1max <-  G(tauStar1, 1, a1, sigma, alpha, L)
library(tidyverse)
library(latex2exp)
library(reshape2)
library(ggthemes)
path <- getwd() %>% strsplit("/")
lastPath <- path[[1]][length(path[[1]])]
if (lastPath == "figs") {
source("source.R")
source("params.R")
}
a2 <- a1 <- 0
tauStar1 <- optim(par=1, fn=G, tau_j=1, a=a1, sigma=sigma, alpha=alpha, L=L, method="Brent", lower=1, upper=100, control=list(fnscale=-1))$par
tauStar2 <- optim(par=1, fn=G, tau_j=1, a=a2, sigma=sigma, alpha=alpha, L=L, method="Brent", lower=1, upper=100, control=list(fnscale=-1))$par
G1min <-  G(1, tauStar2, a1, sigma, alpha, L)
G1max <-  G(tauStar1, 1, a1, sigma, alpha, L)
Gseq <- seq(G1min, G1max, length.out=8)
iso <- function(tau_i, tau_j, a, sigma, alpha, L, Gbar) {
return(abs(G(tau_i, tau_j, a, sigma, alpha, L) - Gbar))
}
top1 <- 2 * (tauStar1 - 1) + 1
top2 <- 2 * (tauStar2 - 1) + 1
tauSeq <- seq(1, top2, by=.001)
isoListL <- list()
isoListR <- list()
tick <- 1
for (i in Gseq) {
isoVecL <- c()
isoVecR <- c()
for (j in tauSeq) {
isoVecL <- c(isoVecL, optim(par=1, fn=iso, tau_j=j, a=a1, sigma=sigma, alpha=alpha, L=L, Gbar=i, lower=1, upper=tauStar1 - .01, method="Brent")$par)
isoVecR <- c(isoVecR, optim(par=1, fn=iso, tau_j=j, a=a1, sigma=sigma, alpha=alpha, L=L, Gbar=i, lower=tauStar1 + .01, upper=top1, method="Brent")$par)
}
isoListL[[tick]] <- isoVecL
isoListR[[tick]] <- isoVecR
tick <- tick + 1
}
# library(tidyverse)
# library(latex2exp)
# path <- getwd() %>% strsplit("/")
# lastPath <- path[[1]][length(path[[1]])]
# if (lastPath == "figs") {
#   source("source.R")
#   source("params.R")
# }
tau_i <- seq(1, 2, .01)
tau_j <- 1
G_vals1 <- G(tau_i, tau_j, a1, sigma, alpha, L)
G_vals2 <- G(tau_i, tau_j, a2, sigma, alpha, L)
G_vals1_n <- (G_vals1 - min(G_vals1)) / (max(G_vals1) - min(G_vals1))
G_vals2_n <- (G_vals2 - min(G_vals2)) / (max(G_vals2) - min(G_vals2))
tauStar1 <- tau_i[which.max(G_vals1)]
tauStar2 <- tau_i[which.max(G_vals2)]
G_data <- data.frame(tau_i, G_vals1, G_vals2)
tick <- .1
aprimecolor <- "steelblue4"
Gplot1 <- ggplot(G_data, aes(x=tau_i, y=G_vals1_n)) +
scale_x_continuous(limits=c(1, tau_i[length(tau_i)] + tick / 2), breaks=c(1, tauStar1, tauStar2), labels=c(1, "", "")) +
theme_classic() +
theme(aspect.ratio=1) +
theme(text=element_text(family="Palatino"), axis.text.y=element_blank(), axis.text.x=element_text(size=12), axis.title.x=element_text(size=12, hjust=1), axis.title.y=element_text(size=12), axis.ticks.y=element_blank()) +
labs(x=TeX("$\\tau_i$"), y = TeX("$G(\\tau_i)$"), title = "Government Objective Function") +
coord_equal()
Gplot2 <- Gplot1 +
geom_vline(xintercept=tauStar1, lty=2, alpha=.5) +
geom_line(size=1.25) +
annotate("text", x=2, y=G_vals1_n[length(G_vals1_n)] + tick, label=TeX("$G(\\tau_i | a)$"), family="Palatino") +
scale_x_continuous(limits=c(1, tau_i[length(tau_i)] + tick / 2), breaks=c(1, tauStar1, tauStar2), labels=c(1, TeX("$\\tau_i^{*}(a)$"), ""))
Gplot3 <- Gplot2 +
geom_vline(xintercept=tauStar2, lty=2, alpha=.5) +
geom_line(aes(y=G_vals2_n), color=aprimecolor, size=1.25) +
annotate("text", x=2, y=G_vals2_n[length(G_vals2_n)] + tick, label=TeX("$G(\\tau_i | a`)$"), family="Palatino", color=aprimecolor) +
scale_x_continuous(limits=c(1, tau_i[length(tau_i)] + tick / 2), breaks=c(1, tauStar1, tauStar2), labels=c(1, TeX("$\\tau_i^{*}(a)$"), TeX("$\\tau_i^{*}(a`)$")))
Gplot <- Gplot3
Gplot
a1
library(tidyverse)
library(latex2exp)
path <- getwd() %>% strsplit("/")
lastPath <- path[[1]][length(path[[1]])]
if (lastPath == "figs") {
source("source.R")
source("params.R")
}
a1
library(tidyverse)
library(latex2exp)
path <- getwd() %>% strsplit("/")
lastPath <- path[[1]][length(path[[1]])]
if (lastPath == "figs") {
source("source.R")
source("params.R")
}
tau_i <- seq(1, 2, .01)
tau_j <- 1
G_vals1 <- G(tau_i, tau_j, a1, sigma, alpha, L)
G_vals2 <- G(tau_i, tau_j, a2, sigma, alpha, L)
G_vals1_n <- (G_vals1 - min(G_vals1)) / (max(G_vals1) - min(G_vals1))
G_vals2_n <- (G_vals2 - min(G_vals2)) / (max(G_vals2) - min(G_vals2))
tauStar1 <- tau_i[which.max(G_vals1)]
tauStar2 <- tau_i[which.max(G_vals2)]
G_data <- data.frame(tau_i, G_vals1, G_vals2)
tick <- .1
aprimecolor <- "steelblue4"
Gplot1 <- ggplot(G_data, aes(x=tau_i, y=G_vals1_n)) +
scale_x_continuous(limits=c(1, tau_i[length(tau_i)] + tick / 2), breaks=c(1, tauStar1, tauStar2), labels=c(1, "", "")) +
theme_classic() +
theme(aspect.ratio=1) +
theme(text=element_text(family="Palatino"), axis.text.y=element_blank(), axis.text.x=element_text(size=12), axis.title.x=element_text(size=12, hjust=1), axis.title.y=element_text(size=12), axis.ticks.y=element_blank()) +
labs(x=TeX("$\\tau_i$"), y = TeX("$G(\\tau_i)$"), title = "Government Objective Function") +
coord_equal()
Gplot2 <- Gplot1 +
geom_vline(xintercept=tauStar1, lty=2, alpha=.5) +
geom_line(size=1.25) +
annotate("text", x=2, y=G_vals1_n[length(G_vals1_n)] + tick, label=TeX("$G(\\tau_i | a)$"), family="Palatino") +
scale_x_continuous(limits=c(1, tau_i[length(tau_i)] + tick / 2), breaks=c(1, tauStar1, tauStar2), labels=c(1, TeX("$\\tau_i^{*}(a)$"), ""))
Gplot3 <- Gplot2 +
geom_vline(xintercept=tauStar2, lty=2, alpha=.5) +
geom_line(aes(y=G_vals2_n), color=aprimecolor, size=1.25) +
annotate("text", x=2, y=G_vals2_n[length(G_vals2_n)] + tick, label=TeX("$G(\\tau_i | a`)$"), family="Palatino", color=aprimecolor) +
scale_x_continuous(limits=c(1, tau_i[length(tau_i)] + tick / 2), breaks=c(1, tauStar1, tauStar2), labels=c(1, TeX("$\\tau_i^{*}(a)$"), TeX("$\\tau_i^{*}(a`)$")))
Gplot <- Gplot3
Gplot
library(tidyverse)
library(latex2exp)
library(reshape2)
library(ggthemes)
path <- getwd() %>% strsplit("/")
lastPath <- path[[1]][length(path[[1]])]
if (lastPath == "figs") {
source("source.R")
source("params.R")
}
a2 <- a1 <- 1
tauStar1 <- optim(par=1, fn=G, tau_j=1, a=a1, sigma=sigma, alpha=alpha, L=L, method="Brent", lower=1, upper=100, control=list(fnscale=-1))$par
tauStar2 <- optim(par=1, fn=G, tau_j=1, a=a2, sigma=sigma, alpha=alpha, L=L, method="Brent", lower=1, upper=100, control=list(fnscale=-1))$par
G1min <-  G(1, tauStar2, a1, sigma, alpha, L)
G1max <-  G(tauStar1, 1, a1, sigma, alpha, L)
Gseq <- seq(G1min, G1max, length.out=8)
iso <- function(tau_i, tau_j, a, sigma, alpha, L, Gbar) {
return(abs(G(tau_i, tau_j, a, sigma, alpha, L) - Gbar))
}
top1 <- 2 * (tauStar1 - 1) + 1
top2 <- 2 * (tauStar2 - 1) + 1
tauSeq <- seq(1, top2, by=.001)
isoListL <- list()
isoListR <- list()
tick <- 1
for (i in Gseq) {
print(i)
isoVecL <- c()
isoVecR <- c()
for (j in tauSeq) {
isoVecL <- c(isoVecL, optim(par=1, fn=iso, tau_j=j, a=a1, sigma=sigma, alpha=alpha, L=L, Gbar=i, lower=1, upper=tauStar1 - .01, method="Brent")$par)
isoVecR <- c(isoVecR, optim(par=1, fn=iso, tau_j=j, a=a1, sigma=sigma, alpha=alpha, L=L, Gbar=i, lower=tauStar1 + .01, upper=top1, method="Brent")$par)
}
isoListL[[tick]] <- isoVecL
isoListR[[tick]] <- isoVecR
tick <- tick + 1
}
isoDataL <- bind_cols(isoListL[seq(2, length(isoListL) - 1)])
isoDataR <- bind_cols(isoListR[seq(2, length(isoListR) - 1)])
isoData <- bind_rows(isoDataL, isoDataR)
isoDataM <- melt(isoData)
isoDataM$value <- ifelse(isoDataM$value < 1.01, NA, isoDataM$value)
isoDataM$value <- ifelse(isoDataM$value > top1 - .0001, NA, isoDataM$value)
isoDataM$variable <- as.numeric(substring(isoDataM$variable, 2))
isoDataM$tau <- rep(tauSeq, length(unique(isoDataM$variable)))
isoDataM$G <- rep(Gseq[seq(2, length(isoListL) - 1)], each=length(tauSeq))
isoDataM <- isoDataM %>% filter(!(value >= tauStar1 - .03 & value <= tauStar1 + .03)) # filter near optimum
# x <- seq(0, 1, length = length(isoDataM$variable %>% unique()))
# colors <- tableau_seq_gradient_pal("Orange-Gold")(x)
isoPlot1 <- ggplot(isoDataM, aes(x=value, y=tau, group=variable, color=variable)) +
scale_x_continuous(limits=c(1, top1), breaks=c(1, tauStar1), labels=c(1, TeX("$\\tau_i^{*}(a_i)$"))) +
scale_y_continuous(limits=c(1, top2), breaks=c(1, tauStar2), labels=c(1, TeX("$\\tau_j^{*}(a_j)$"))) +
theme_classic() +
labs(x=TeX("$\\tau_i$"), y = TeX("$\\tau_j$"), title = "Government Iso-Welfare Curves") +
theme(aspect.ratio=1, text=element_text(family="Palatino"), legend.position = "none")
isoPlot2 <- isoPlot1 +
geom_line() +
annotate("segment", x=top1 - .1, xend = top1 - .1, y = 1.5, yend = 1.3, arrow = arrow(length = unit(1, "lines"))) +
annotate("text", x = top1-.3, y = 1.4, label = "Increasing \niso-welfare", family="Palatino") +
scale_color_gradient_tableau(palette="Blue")
isoPlot <- isoPlot2
brPlot <- ggplot(isoDataM, aes(x=value, y=tau, group=variable, color=variable)) +
geom_line(alpha=.5) +
scale_color_gradient_tableau(palette="Blue") +
geom_vline(xintercept=tauStar1, size=1.25) +
geom_hline(yintercept=tauStar2, size=1.25) +
annotate("text", x=tauStar1 + .05, y=tauStar2 + .05, size=4, hjust=0, label=TeX("$\\tau_i^{*}(a_i), \\tau_j^{*}(a_j)$"), family="Palatino") +
scale_x_continuous(limits=c(1, top1), breaks=c(1, tauStar1), labels=c(1, TeX("$\\tau_i^{*}(a_i)$"))) +
scale_y_continuous(limits=c(1, top2), breaks=c(1, tauStar2), labels=c(1, TeX("$\\tau_j^{*}(a_j)$"))) +
theme_classic() +
labs(x=TeX("$\\tau_i$"), y = TeX("$\\tau_j$"), title = "Government Best Responses") +
theme(text=element_text(family="Palatino"), axis.text=element_text(size=12),
legend.position = "none", aspect.ratio=1)
brPlot
