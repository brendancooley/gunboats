libs <- c("tidyverse", "patchwork", "ggrepel", "latex2exp", "ggpubr", "padr")
ipak(libs)
if (dir.exists("temp")) {
unlink("temp", recursive=TRUE)
}
if (getwd()=="figs") {
tradeM <- read_csv("data/tradeM.csv")
wars <- read_csv("data/wars.csv")
} else {
tradeM <- read_csv("../figs/data/tradeM.csv", col_types=list(pop1="n", pop2="n", deaths="n"))
wars <- read_csv("../figs/data/wars.csv")
}
tradeM$deaths <- as.integer(tradeM$deaths)
### PLOT ###
tradeM$zeros <- 0
# choose variables to plot
tradeM$tradeInt.plot <- tradeM$tradeInt.ihs.lag
tradeM$meanPolity.plot <- tradeM$meanPolity
tradeF <- tradeM %>% filter(!is.na(tradeInt.plot) & !is.na(meanPolity.plot)) # filter missing lagged variables
tradeUF <- tradeM %>% filter(is.na(tradeInt.plot) | is.na(meanPolity.plot))
tradeF$cname1 <- countrycode(tradeF$ccode1, "cown", "country.name")
tradeF$cname2 <- countrycode(tradeF$ccode2, "cown", "country.name")
# rename Russia
tradeF$cname1 <- ifelse(tradeF$cname1=="Russian Federation", "Russia", tradeF$cname1)
tradeF$cname2 <- ifelse(tradeF$cname2=="Russian Federation", "Russia", tradeF$cname2)
tradeF$dyadName <- paste0(tradeF$cname1, " - ", tradeF$cname2, ", ", tradeF$year)
tradeFwars <- tradeF %>% filter(war==1)
tradeFpeace <- tradeF %>% filter(war==0)
# add labels to representative observations
tradeFwars$lab <- ifelse(tradeFwars$deaths > 1000000,
paste0(tradeFwars$cname1, " - ", tradeFwars$cname2, ", ", tradeFwars$year, "\n",
paste(format(round((tradeFwars$deaths) / 1000000, 1), trim = TRUE), "million"),
" battle deaths"),
paste0(tradeFwars$cname1, " - ", tradeFwars$cname2, ", ", tradeFwars$year, "\n",
paste(format(round((tradeFwars$deaths) / 1000, 1), trim = TRUE), "thousand"),
" battle deaths")
)
keep <- c("Austria-Hungary - Russia, 1914", "Armenia - Azerbaijan, 1993")
tradeFwars$lab <- ifelse(tradeFwars$dyadName %in% keep, tradeFwars$lab, "")
tradeFpeace$lab <- tradeFpeace$dyadName
# unmerged wars
warsUnmerged <- tradeUF %>% filter(war==1)
warsUnmerged$cname1 <- countrycode(warsUnmerged$ccode1, "cown", "country.name")
warsUnmerged$cname2 <- countrycode(warsUnmerged$ccode2, "cown", "country.name")
# get those with polity data available
tradeUFP <- tradeUF %>% filter(!is.na(meanPolity.plot))
N <- 10000
sampleI <- sample(seq(1, nrow(tradeFpeace)), N)
tradeS <- tradeFpeace[sampleI, ]
# add representative dot with label
repPeaceObs <- "France - Germany, 2007"
if (!(repPeaceObs) %in% tradeS$dyadName) {
toAdd <- tradeFpeace %>% filter(dyadName==repPeaceObs)
tradeS <- bind_rows(tradeS, toAdd)
}
tradeS$lab <- ifelse(tradeS$lab==repPeaceObs, tradeS$lab, "")
# size bounds
maxSize <- 10
popSummary <- summary(tradeS$meanPop) / max(tradeS$meanPop) * maxSize
warsAll <- bind_rows(tradeFwars, warsUnmerged)
deathsSummary <- summary(warsAll$deaths) / max(warsAll$deaths, na.rm=T) * maxSize
# colors: https://picular.co/volcano
# colors2: https://picular.co/war
# lineColor <- "#34556D"
lineColor <- "#191309"
# pointsColor <- "#CCA686"
pointsColor <- "#A8BFD9"
# warsColor <- "#DD2E2B"
warsColor <- "#B15740"
# warsColorBoundary <- "#C7502B"
# warsColorFill <- "#F17929"
warsColorBoundary <- "#C7502B"
warsColorFill <- "#F17929"
labelSize <- 11
titleSize <- 16
captionSize <- 9
annotationSize <- 4
### Commercial-Democratic Peace ###
pos <- position_jitter()
main <- tradeS %>% ggplot(aes(x=meanPolity.plot, y=tradeInt.plot, label=lab)) +
# geom_point(size=.5, alpha=.5) +
stat_smooth(geom="line", method="lm", se=FALSE, color=lineColor, size=.75, alpha=1) +
geom_point( alpha=.2, fill=pointsColor, color=pointsColor, pch=21,
position=pos) +
geom_point(data=tradeFwars, aes(size=deaths, text=dyadName),
alpha=1, fill=warsColor, color="black", pch=21, stroke=.5,
position=pos) +
geom_text_repel(data=tradeFwars, size=3, box.padding = unit(0.75, "lines"), position=pos) +
geom_text_repel(data=tradeS, size=3, box.padding = unit(0.75, "lines"), position=pos) +
scale_size_continuous(range = c(maxSize / 10, maxSize)) +
# annotate("text", x=-5, y=max(tradeS$tradeInt.plot), label="More Autocratic", size=annotationSize, hjust=0, vjust=.5) +
# annotate("segment", x=-5.5, xend=-8, y=max(tradeS$tradeInt.plot), yend=max(tradeS$tradeInt.plot), arrow=arrow(), size=.5) +
# annotate("text", x=5, y=max(tradeS$tradeInt.plot), label="More Democratic", size=annotationSize, hjust=1, vjust=.5) +
# annotate("segment", x=5.5, xend=8, y=max(tradeS$tradeInt.plot), yend=max(tradeS$tradeInt.plot), arrow=arrow(), size=.5) +
# geom_line(aes(x=meanPolity, y=tradeInt.pred)) +
labs(x="Dyad-Year Average POLITY Score", y="Dyad-Year Economic Integration") +
# ggtitle("Political Bias, Trade, and War, 1870-2014") +
theme_classic() +
theme(axis.title.y=element_text(size=labelSize),
axis.ticks.y=element_blank(), axis.text.y=element_blank(),
axis.title.x=element_blank()) +
theme(axis.text.x=element_text(size=labelSize)) +
# theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), axis.line.x=element_blank()) +
guides(size=FALSE)
polityDensity <- tradeS %>% ggplot(aes(x=meanPolity.plot)) +
geom_line(stat="density", color=pointsColor) +
labs(title="The Commercial-Democratic Peace, 1870-2014") +
theme_classic() +
theme(axis.text=element_blank(), axis.ticks=element_blank(),
axis.title=element_blank(), axis.line=element_blank(),
plot.title=element_text(size=titleSize))
tradeIntDensity <- tradeS %>% ggplot(aes(x=tradeInt.plot)) +
geom_line(stat="density", color=pointsColor) +
theme_classic() +
theme(axis.text=element_blank(), axis.ticks=element_blank(), axis.title=element_blank(), axis.line=element_blank()) +
# theme(plot.margin = unit(c(0, 0, 0, 0), "cm")) +
coord_flip()
text.a <- paste0("Notes: Each point is one dyad-year. Red-orange points are dyad-years in which a war began, ",
"sized by the number of battle deaths each side incurred during that war. ",
"Light blue points are a sample of 10,000 dyad-years in which no wars occured. ",
"Economic integration is measured as the average of the countries' directed imports to gdp ratio. ",
"An inverse hyperbolic sine transformation was applied to normalize the economic integration measure. ",
"Economic Integration score lagged by one year. ",
"Margin plots show the density of the transformed economic integration measure and the average POLITY score. ",
"A trend line shows the correlation between economic integration and average POLITY score in the sample of peaceful dyads. ",
"The distribution of average POLITY scores for war dyads for which trade or gdp data were not available ",
"is plotted in a histogram below the scatterplot.")
text.b <- paste0("Data Sources: ",
"(Wars) Sarkees, Meredith Reid and Frank Wayman (2010). Resort to War: 1816-2007. Washington DC: CQ Press. ",
"(Trade) Barbieri, Katherine and Omar M. G. Omar Keshk. 2016. Correlates of War Project Trade Data Set Codebook, Version 4.0. Online: http://correlatesofwar.org. ",
"Barbieri, Katherine, Omar M. G. Keshk, and Brian Pollins. 2009. ",
"'TRADING DATA: Evaluating our Assumptions and Coding Rules.' Conflict Management and Peace Science. 26(5): 471-491. ",
"(GDP) Maddison Project Database, version 2018. Bolt, Jutta, Robert Inklaar, Herman de Jong and Jan Luiten van Zanden (2018), ",
"'Rebasing Maddison: new income comparisons and the shape of long-run economic development', Maddison Project Working paper 10. ",
"(POLITY) Marshall, M. G., Jaggers, K., & Gurr, T. R. (2002). Polity IV project: Dataset users' manual. College Park: University of Maryland.")
caption.a <- ggparagraph(text.a, size=captionSize)
caption.b <- ggparagraph(text.b, size=captionSize)
caption <- caption.a + caption.b + plot_layout(ncol=1)
polityRail <- warsUnmerged %>% ggplot(aes(x=meanPolity.plot)) +
geom_histogram(fill=warsColor, alpha=1) +
xlim(-10, 10) +
labs(x="Dyad-Year Average POLITY Score", y="Wars with\nMissing Trade") +
theme(axis.title.x=element_text(size=labelSize), axis.title.y=element_text(size=labelSize),
axis.text.x=element_text(size=labelSize), axis.line.x=element_line(),
axis.ticks.y=element_blank(), panel.background=element_blank(),
axis.text.y=element_blank(), axis.line.y=element_blank(),
plot.caption=element_text(size=captionSize, hjust=0))
polityRailCaption <- polityRail + caption.a + plot_layout(ncol=1)
empty <- ggplot() + geom_point(aes(1,1), colour="white")+
theme(axis.ticks=element_blank(), panel.background=element_blank(),
axis.text=element_blank(), axis.line=element_blank(),
axis.title=element_blank())
### Commercial Peace ###
pos <- position_jitter()
TT <- tradeS %>% ggplot(aes(x=share1.ihs.lag, y=share2.ihs.lag)) +
geom_point(alpha=.2, fill=pointsColor, color=pointsColor, pch=21,
position=pos) +
geom_point(data=tradeFwars, aes(size=deaths),
alpha=1, fill=warsColor, color="black", pch=21, stroke=.5,
position=pos) +
labs(x="", y="") +
theme_classic() +
theme(axis.ticks=element_blank(), axis.text=element_blank()) +
guides(size=FALSE)
### Dyad Fixed Effects ###
tradeMW <- tradeM %>% filter(dyadID %in% unique(wars$dyadID))
tradeMW$dyadChar <- paste0(tradeMW$iso3c1, "-", tradeMW$iso3c2)
tradeMW$year <- as.Date(ISOdate(tradeMW$year, 1, 1))  # beginning of year
tradeMW <- tradeMW %>% pad(group="dyadChar")
include <- c("GBR-CHN", "USA-JPN", "USA-DEU", "USA-IRQ", "CHN-IND", "IND-PAK")
tradeMWtest <- tradeMW %>% filter(dyadChar %in% include)
ggplot(data=tradeMWtest, aes(x=year, y=tradeInt.ihs)) +
geom_line() +
geom_vline(data=filter(tradeMWtest, war==1), aes(xintercept=year), color="red") +
labs(x="Year", y="Economic Integration") +
theme_classic() +
facet_wrap(~dyadChar)
### "Regression Discontinuity" ###
tradeRDlist <- list()
window <- 10
for (i in 1:nrow(wars)) {
w <- wars$dyadID[i]
y <- wars$warstrtyr[i]
tradeW <- tradeM %>% filter(dyadID == w & year >= y - window & year <= y + window)
if (nrow(tradeW) > 0) {
tradeW$t <- tradeW$year - y
}
tradeRDlist[[i]] <- tradeW
}
tradeRD <- bind_rows(tradeRDlist)
pos <- position_jitter()
ggplot(data=tradeRD, aes(x=t, y=tradeInt.ihs)) +
geom_jitter(size=.5, alpha=.2, width=.2) +
geom_smooth(data=filter(tradeRD, t<=0), method="lm", se=FALSE, color="red") +
geom_smooth(data=filter(tradeRD, t>=0), method="lm", se=FALSE, color="red") +
geom_vline(xintercept=0, lty=2) +
labs(x="Years After Beginning of War", y="Dyadic Economic Integration", title="Trade and War",
caption="Plot depicts trade relations between dyads that experienced wars,\n10 years prior to and 10 years following the outbreak of hostilities.") +
theme_classic() +
theme(axis.ticks.y=element_blank(), axis.text.y=element_blank())
ggplot(data=tradeRD, aes(x=t, y=tradeInt.ihs)) +
geom_jitter(size=.5, alpha=.2, width=.2) +
geom_smooth(data=filter(tradeRD, t<=0), method="lm", se=FALSE, color="red") +
geom_smooth(data=filter(tradeRD, t>=0), method="lm", se=FALSE, color="red") +
geom_vline(xintercept=0, lty=2) +
labs(x="Years After Beginning of War", y="Dyadic Economic Integration", title="Trade and War",
caption="Plot depicts trade relations between dyads that experienced wars,\n10 years prior to and 10 years following the outbreak of hostilities.") +
theme_classic() +
theme(axis.ticks.y=element_blank(), axis.text.y=element_blank())
tradeRDplot <- ggplot(data=tradeRD, aes(x=t, y=tradeInt.ihs)) +
geom_jitter(size=.5, alpha=.2, width=.2) +
geom_smooth(data=filter(tradeRD, t<=0), method="lm", se=FALSE, color="red") +
geom_smooth(data=filter(tradeRD, t>=0), method="lm", se=FALSE, color="red") +
geom_vline(xintercept=0, lty=2) +
labs(x="Years After Beginning of War", y="Dyadic Economic Integration", title="Trade and War",
caption="") +
theme_classic() +
theme(aspect.ratio=1) +
theme(axis.ticks.y=element_blank(), axis.text.y=element_blank())
tradeRDplot
source("~/Dropbox/11_Workflow/source.R")
libs <- c("tidyverse", "patchwork", "ggrepel", "latex2exp", "ggpubr", "padr")
ipak(libs)
if (dir.exists("temp")) {
unlink("temp", recursive=TRUE)
}
if (getwd()=="figs") {
tradeM <- read_csv("../data/tradeM.csv")
wars <- read_csv("../data/wars.csv")
} else {
tradeM <- read_csv("../data/tradeM.csv", col_types=list(pop1="n", pop2="n", deaths="n"))
wars <- read_csv("../data/wars.csv")
}
library(tidyverse)
library(latex2exp)
path <- getwd() %>% strsplit("/")
lastPath <- path[[1]][length(path[[1]])]
if (lastPath == "figs") {
source("source.R")
source("params.R")
}
tau_i <- seq(1, 2, .01)
tau_j <- 1
G_vals1 <- G(tau_i, tau_j, a1, sigma, n, alpha, L)
G_vals2 <- G(tau_i, tau_j, a2, sigma, n, alpha, L)
G_vals1_n <- (G_vals1 - min(G_vals1)) / (max(G_vals1) - min(G_vals1))
G_vals2_n <- (G_vals2 - min(G_vals2)) / (max(G_vals2) - min(G_vals2))
tauStar1 <- tau_i[which.max(G_vals1)]
tauStar2 <- tau_i[which.max(G_vals2)]
G_data <- data.frame(tau_i, G_vals1, G_vals2)
tick <- .1
aprimecolor <- "steelblue4"
GPlot1 <- ggplot(G_data, aes(x=tau_i, y=G_vals1_n)) +
scale_x_continuous(limits=c(1, tau_i[length(tau_i)] + tick / 2), breaks=c(1, tauStar1, tauStar2), labels=c(1, TeX("$\\tau_i^{*}(a)$"), TeX("$\\tau_i^{*}(a`)$"))) +
theme_classic() +
theme(aspect.ratio=1) +
theme(text=element_text(family="Palatino"), axis.text.y=element_blank(), axis.text.x=element_text(size=12), axis.title.x=element_text(size=12, hjust=1), axis.title.y=element_text(size=12), axis.ticks.y=element_blank()) +
labs(x=TeX("$\\tau_i$"), y = TeX("$G(\\tau_i)$"), title = "Government Objective Function") +
coord_equal()
Gplot2 <- Gplot1 +
geom_vline(xintercept=tauStar1, lty=2, alpha=.5) +
geom_line(size=1.25) +
annotate("text", x=2, y=G_vals1_n[length(G_vals1_n)] + tick, label=TeX("$G(\\tau_i | a)$"), family="Palatino") +
Gplot3 <- Gplot2 +
geom_vline(xintercept=tauStar2, lty=2, alpha=.5) +
geom_line(aes(y=G_vals2_n), color=aprimecolor, size=1.25) +
annotate("text", x=2, y=G_vals2_n[length(G_vals2_n)] + tick, label=TeX("$G(\\tau_i | a`)$"), family="Palatino", color=aprimecolor)
Gplot <- Gplot3
Gplot2
GPlot1
Gplot1 <- ggplot(G_data, aes(x=tau_i, y=G_vals1_n)) +
scale_x_continuous(limits=c(1, tau_i[length(tau_i)] + tick / 2), breaks=c(1, tauStar1, tauStar2), labels=c(1, TeX("$\\tau_i^{*}(a)$"), TeX("$\\tau_i^{*}(a`)$"))) +
theme_classic() +
theme(aspect.ratio=1) +
theme(text=element_text(family="Palatino"), axis.text.y=element_blank(), axis.text.x=element_text(size=12), axis.title.x=element_text(size=12, hjust=1), axis.title.y=element_text(size=12), axis.ticks.y=element_blank()) +
labs(x=TeX("$\\tau_i$"), y = TeX("$G(\\tau_i)$"), title = "Government Objective Function") +
coord_equal()
Gplot1
Gplot1
Gplot1
Gplot1 <- ggplot(G_data, aes(x=tau_i, y=G_vals1_n)) +
scale_x_continuous(limits=c(1, tau_i[length(tau_i)] + tick / 2), breaks=c(1, tauStar1, tauStar2), labels=c(1, "", "")) +
theme_classic() +
theme(aspect.ratio=1) +
theme(text=element_text(family="Palatino"), axis.text.y=element_blank(), axis.text.x=element_text(size=12), axis.title.x=element_text(size=12, hjust=1), axis.title.y=element_text(size=12), axis.ticks.y=element_blank()) +
labs(x=TeX("$\\tau_i$"), y = TeX("$G(\\tau_i)$"), title = "Government Objective Function") +
coord_equal()
Gplot1
Gplot2 <- Gplot1 +
geom_vline(xintercept=tauStar1, lty=2, alpha=.5) +
geom_line(size=1.25) +
annotate("text", x=2, y=G_vals1_n[length(G_vals1_n)] + tick, label=TeX("$G(\\tau_i | a)$"), family="Palatino") +
scale_x_continuous(limits=c(1, tau_i[length(tau_i)] + tick / 2), breaks=c(1, tauStar1, tauStar2), labels=c(1, TeX("$\\tau_i^{*}(a)$"), "")) +
Gplot3 <- Gplot2 +
geom_vline(xintercept=tauStar2, lty=2, alpha=.5) +
geom_line(aes(y=G_vals2_n), color=aprimecolor, size=1.25) +
annotate("text", x=2, y=G_vals2_n[length(G_vals2_n)] + tick, label=TeX("$G(\\tau_i | a`)$"), family="Palatino", color=aprimecolor) +
scale_x_continuous(limits=c(1, tau_i[length(tau_i)] + tick / 2), breaks=c(1, tauStar1, tauStar2), labels=c(1, TeX("$\\tau_i^{*}(a)$"), TeX("$\\tau_i^{*}(a`)$"))) +
Gplot <- Gplot3
Gplot2
Gplot2 <- Gplot1 +
geom_vline(xintercept=tauStar1, lty=2, alpha=.5) +
geom_line(size=1.25) +
annotate("text", x=2, y=G_vals1_n[length(G_vals1_n)] + tick, label=TeX("$G(\\tau_i | a)$"), family="Palatino") +
scale_x_continuous(limits=c(1, tau_i[length(tau_i)] + tick / 2), breaks=c(1, tauStar1, tauStar2), labels=c(1, TeX("$\\tau_i^{*}(a)$"), "")) +
Gplot3 <- Gplot2 +
geom_vline(xintercept=tauStar2, lty=2, alpha=.5) +
geom_line(aes(y=G_vals2_n), color=aprimecolor, size=1.25) +
annotate("text", x=2, y=G_vals2_n[length(G_vals2_n)] + tick, label=TeX("$G(\\tau_i | a`)$"), family="Palatino", color=aprimecolor) +
scale_x_continuous(limits=c(1, tau_i[length(tau_i)] + tick / 2), breaks=c(1, tauStar1, tauStar2), labels=c(1, TeX("$\\tau_i^{*}(a)$"), TeX("$\\tau_i^{*}(a`)$"))) +
Gplot <- Gplot3
Gplot2 <- Gplot1 +
geom_vline(xintercept=tauStar1, lty=2, alpha=.5) +
geom_line(size=1.25) +
annotate("text", x=2, y=G_vals1_n[length(G_vals1_n)] + tick, label=TeX("$G(\\tau_i | a)$"), family="Palatino") +
scale_x_continuous(limits=c(1, tau_i[length(tau_i)] + tick / 2), breaks=c(1, tauStar1, tauStar2), labels=c(1, TeX("$\\tau_i^{*}(a)$"), ""))
Gplot2
Gplot3 <- Gplot2 +
geom_vline(xintercept=tauStar2, lty=2, alpha=.5) +
geom_line(aes(y=G_vals2_n), color=aprimecolor, size=1.25) +
annotate("text", x=2, y=G_vals2_n[length(G_vals2_n)] + tick, label=TeX("$G(\\tau_i | a`)$"), family="Palatino", color=aprimecolor) +
scale_x_continuous(limits=c(1, tau_i[length(tau_i)] + tick / 2), breaks=c(1, tauStar1, tauStar2), labels=c(1, TeX("$\\tau_i^{*}(a)$"), TeX("$\\tau_i^{*}(a`)$"))) +
Gplot <- Gplot3
Gplot3 <- Gplot2 +
geom_vline(xintercept=tauStar2, lty=2, alpha=.5) +
geom_line(aes(y=G_vals2_n), color=aprimecolor, size=1.25) +
annotate("text", x=2, y=G_vals2_n[length(G_vals2_n)] + tick, label=TeX("$G(\\tau_i | a`)$"), family="Palatino", color=aprimecolor) +
scale_x_continuous(limits=c(1, tau_i[length(tau_i)] + tick / 2), breaks=c(1, tauStar1, tauStar2), labels=c(1, TeX("$\\tau_i^{*}(a)$"), TeX("$\\tau_i^{*}(a`)$")))
Gplot3
library(tidyverse)
library(latex2exp)
library(reshape2)
library(ggthemes)
path <- getwd() %>% strsplit("/")
lastPath <- path[[1]][length(path[[1]])]
if (lastPath == "figs") {
source("source.R")
source("params.R")
}
a2 <- a1 <- 0
tauStar1 <- optim(par=1, fn=G, tau_j=1, a=a1, sigma=sigma, n=n, alpha=alpha, L=L, method="Brent", lower=1, upper=100, control=list(fnscale=-1))$par
tauStar2 <- optim(par=1, fn=G, tau_j=1, a=a2, sigma=sigma, n=n, alpha=alpha, L=L, method="Brent", lower=1, upper=100, control=list(fnscale=-1))$par
G1min <-  G(1, tauStar2, a1, sigma, n, alpha, L)
G1max <-  G(tauStar1, 1, a1, sigma, n, alpha, L)
Gseq <- seq(G1min, G1max, length.out=8)
iso <- function(tau_i, tau_j, a, sigma, n, alpha, L, Gbar) {
return(abs(G(tau_i, tau_j, a, sigma, n, alpha, L) - Gbar))
}
top1 <- 2 * (tauStar1 - 1) + 1
top2 <- 2 * (tauStar2 - 1) + 1
tauSeq <- seq(1, top2, by=.001)
isoListL <- list()
isoListR <- list()
tick <- 1
for (i in Gseq) {
isoVecL <- c()
isoVecR <- c()
for (j in tauSeq) {
isoVecL <- c(isoVecL, optim(par=1, fn=iso, tau_j=j, a=a1, sigma=sigma, n=n, alpha=alpha, L=L, Gbar=i, lower=1, upper=tauStar1 - .01, method="Brent")$par)
isoVecR <- c(isoVecR, optim(par=1, fn=iso, tau_j=j, a=a1, sigma=sigma, n=n, alpha=alpha, L=L, Gbar=i, lower=tauStar1 + .01, upper=top1, method="Brent")$par)
}
isoListL[[tick]] <- isoVecL
isoListR[[tick]] <- isoVecR
tick <- tick + 1
}
isoDataL <- bind_cols(isoListL[seq(2, length(isoListL) - 1)])
isoDataR <- bind_cols(isoListR[seq(2, length(isoListR) - 1)])
isoData <- bind_rows(isoDataL, isoDataR)
isoDataM <- melt(isoData)
isoDataM$value <- ifelse(isoDataM$value < 1.01, NA, isoDataM$value)
isoDataM$value <- ifelse(isoDataM$value > top1 - .0001, NA, isoDataM$value)
isoDataM$variable <- as.numeric(substring(isoDataM$variable, 2))
isoDataM$tau <- rep(tauSeq, length(unique(isoDataM$variable)))
isoDataM$G <- rep(Gseq[seq(2, length(isoListL) - 1)], each=length(tauSeq))
isoDataM <- isoDataM %>% filter(!(value >= tauStar1 - .03 & value <= tauStar1 + .03)) # filter near optimum
# x <- seq(0, 1, length = length(isoDataM$variable %>% unique()))
# colors <- tableau_seq_gradient_pal("Orange-Gold")(x)
isoPlot1 <- ggplot(isoDataM, aes(x=value, y=tau, group=variable, color=variable)) +
theme_classic() +
labs(x=TeX("$\\tau_i$"), y = TeX("$\\tau_j$"), title = "Government Iso-Welfare Curves") +
theme(aspect.ratio=1, text=element_text(family="Palatino"), legend.position = "none")
isoPlot2 <- isoPlot1 +
geom_line() +
annotate("segment", x=top1 - .1, xend = top1 - .1, y = 1.5, yend = 1.3, arrow = arrow(length = unit(1, "lines"))) +
annotate("text", x = top1-.3, y = 1.4, label = "Increasing \niso-welfare", family="Palatino") +
scale_color_gradient_tableau(palette="Blue") +
scale_x_continuous(limits=c(1, top1), breaks=c(1, tauStar1), labels=c(1, TeX("$\\tau_i^{*}(a_i)$"))) +
scale_y_continuous(limits=c(1, top2), breaks=c(1, tauStar2), labels=c(1, TeX("$\\tau_j^{*}(a_j)$")))
isoPlot1
isoPlot1 <- ggplot(isoDataM, aes(x=value, y=tau, group=variable, color=variable)) +
scale_x_continuous(limits=c(1, top1), breaks=c(1, tauStar1), labels=c(1, TeX("$\\tau_i^{*}(a_i)$"))) +
scale_y_continuous(limits=c(1, top2), breaks=c(1, tauStar2), labels=c(1, TeX("$\\tau_j^{*}(a_j)$"))) +
theme_classic() +
labs(x=TeX("$\\tau_i$"), y = TeX("$\\tau_j$"), title = "Government Iso-Welfare Curves") +
theme(aspect.ratio=1, text=element_text(family="Palatino"), legend.position = "none")
isoPlot1
isoPlot1
isoPlot2 <- isoPlot1 +
geom_line() +
annotate("segment", x=top1 - .1, xend = top1 - .1, y = 1.5, yend = 1.3, arrow = arrow(length = unit(1, "lines"))) +
annotate("text", x = top1-.3, y = 1.4, label = "Increasing \niso-welfare", family="Palatino") +
scale_color_gradient_tableau(palette="Blue")
isoPlot2
library(tidyverse)
library(latex2exp)
library(reshape2)
library(ggthemes)
path <- getwd() %>% strsplit("/")
lastPath <- path[[1]][length(path[[1]])]
if (lastPath == "figs") {
source("source.R")
source("params.R")
}
a2 <- a1 <- 0
tauStar1 <- optim(par=1, fn=G, tau_j=1, a=a1, sigma=sigma, n=n, alpha=alpha, L=L, method="Brent", lower=1, upper=100, control=list(fnscale=-1))$par
tauStar2 <- optim(par=1, fn=G, tau_j=1, a=a2, sigma=sigma, n=n, alpha=alpha, L=L, method="Brent", lower=1, upper=100, control=list(fnscale=-1))$par
G1min <-  G(1, tauStar2, a1, sigma, n, alpha, L)
G1max <-  G(tauStar1, 1, a1, sigma, n, alpha, L)
Gseq <- seq(G1min, G1max, length.out=8)
iso <- function(tau_i, tau_j, a, sigma, n, alpha, L, Gbar) {
return(abs(G(tau_i, tau_j, a, sigma, n, alpha, L) - Gbar))
}
top1 <- 2 * (tauStar1 - 1) + 1
top2 <- 2 * (tauStar2 - 1) + 1
tauSeq <- seq(1, top2, by=.001)
isoListL <- list()
isoListR <- list()
tick <- 1
for (i in Gseq) {
isoVecL <- c()
isoVecR <- c()
for (j in tauSeq) {
isoVecL <- c(isoVecL, optim(par=1, fn=iso, tau_j=j, a=a1, sigma=sigma, n=n, alpha=alpha, L=L, Gbar=i, lower=1, upper=tauStar1 - .01, method="Brent")$par)
isoVecR <- c(isoVecR, optim(par=1, fn=iso, tau_j=j, a=a1, sigma=sigma, n=n, alpha=alpha, L=L, Gbar=i, lower=tauStar1 + .01, upper=top1, method="Brent")$par)
}
isoListL[[tick]] <- isoVecL
isoListR[[tick]] <- isoVecR
tick <- tick + 1
}
isoDataL <- bind_cols(isoListL[seq(2, length(isoListL) - 1)])
isoDataR <- bind_cols(isoListR[seq(2, length(isoListR) - 1)])
isoData <- bind_rows(isoDataL, isoDataR)
isoDataM <- melt(isoData)
isoDataM$value <- ifelse(isoDataM$value < 1.01, NA, isoDataM$value)
isoDataM$value <- ifelse(isoDataM$value > top1 - .0001, NA, isoDataM$value)
isoDataM$variable <- as.numeric(substring(isoDataM$variable, 2))
isoDataM$tau <- rep(tauSeq, length(unique(isoDataM$variable)))
isoDataM$G <- rep(Gseq[seq(2, length(isoListL) - 1)], each=length(tauSeq))
isoDataM <- isoDataM %>% filter(!(value >= tauStar1 - .03 & value <= tauStar1 + .03)) # filter near optimum
# x <- seq(0, 1, length = length(isoDataM$variable %>% unique()))
# colors <- tableau_seq_gradient_pal("Orange-Gold")(x)
isoPlot1 <- ggplot(isoDataM, aes(x=value, y=tau, group=variable, color=variable)) +
scale_x_continuous(limits=c(1, top1), breaks=c(1, tauStar1), labels=c(1, TeX("$\\tau_i^{*}(a_i)$"))) +
scale_y_continuous(limits=c(1, top2), breaks=c(1, tauStar2), labels=c(1, TeX("$\\tau_j^{*}(a_j)$"))) +
theme_classic() +
labs(x=TeX("$\\tau_i$"), y = TeX("$\\tau_j$"), title = "Government Iso-Welfare Curves") +
theme(aspect.ratio=1, text=element_text(family="Palatino"), legend.position = "none")
isoPlot2 <- isoPlot1 +
geom_line() +
annotate("segment", x=top1 - .1, xend = top1 - .1, y = 1.5, yend = 1.3, arrow = arrow(length = unit(1, "lines"))) +
annotate("text", x = top1-.3, y = 1.4, label = "Increasing \niso-welfare", family="Palatino") +
scale_color_gradient_tableau(palette="Blue")
isoPlot <- isoPlot2
brPlot <- ggplot(isoDataM, aes(x=value, y=tau, group=variable, color=variable)) +
geom_line(alpha=.5) +
scale_color_gradient_tableau(palette="Blue") +
geom_vline(xintercept=tauStar1, size=1.25) +
geom_hline(yintercept=tauStar2, size=1.25) +
annotate("text", x=tauStar1 + .05, y=tauStar2 + .05, size=4, hjust=0, label=TeX("$\\tau_i^{*}(a_i), \\tau_j^{*}(a_j)$"), family="Palatino") +
scale_x_continuous(limits=c(1, top1), breaks=c(1, tauStar1), labels=c(1, TeX("$\\tau_i^{*}(a_i)$"))) +
scale_y_continuous(limits=c(1, top2), breaks=c(1, tauStar2), labels=c(1, TeX("$\\tau_j^{*}(a_j)$"))) +
theme_classic() +
labs(x=TeX("$\\tau_i$"), y = TeX("$\\tau_j$"), title = "Government Best Responses") +
theme(text=element_text(family="Palatino"), axis.text=element_text(size=12),
legend.position = "none", aspect.ratio=1)
library(tidyverse)
library(latex2exp)
path <- getwd() %>% strsplit("/")
lastPath <- path[[1]][length(path[[1]])]
if (lastPath == "figs") {
source("source.R")
source("params.R")
}
tau_i <- seq(1, 2, .01)
tau_j <- 1
G_vals1 <- G(tau_i, tau_j, a1, sigma, n, alpha, L)
G_vals2 <- G(tau_i, tau_j, a2, sigma, n, alpha, L)
G_vals1_n <- (G_vals1 - min(G_vals1)) / (max(G_vals1) - min(G_vals1))
G_vals2_n <- (G_vals2 - min(G_vals2)) / (max(G_vals2) - min(G_vals2))
tauStar1 <- tau_i[which.max(G_vals1)]
tauStar2 <- tau_i[which.max(G_vals2)]
G_data <- data.frame(tau_i, G_vals1, G_vals2)
tick <- .1
aprimecolor <- "steelblue4"
Gplot1 <- ggplot(G_data, aes(x=tau_i, y=G_vals1_n)) +
scale_x_continuous(limits=c(1, tau_i[length(tau_i)] + tick / 2), breaks=c(1, tauStar1, tauStar2), labels=c(1, "", "")) +
theme_classic() +
theme(aspect.ratio=1) +
theme(text=element_text(family="Palatino"), axis.text.y=element_blank(), axis.text.x=element_text(size=12), axis.title.x=element_text(size=12, hjust=1), axis.title.y=element_text(size=12), axis.ticks.y=element_blank()) +
labs(x=TeX("$\\tau_i$"), y = TeX("$G(\\tau_i)$"), title = "Government Objective Function") +
coord_equal()
Gplot2 <- Gplot1 +
geom_vline(xintercept=tauStar1, lty=2, alpha=.5) +
geom_line(size=1.25) +
annotate("text", x=2, y=G_vals1_n[length(G_vals1_n)] + tick, label=TeX("$G(\\tau_i | a)$"), family="Palatino") +
scale_x_continuous(limits=c(1, tau_i[length(tau_i)] + tick / 2), breaks=c(1, tauStar1, tauStar2), labels=c(1, TeX("$\\tau_i^{*}(a)$"), ""))
Gplot3 <- Gplot2 +
geom_vline(xintercept=tauStar2, lty=2, alpha=.5) +
geom_line(aes(y=G_vals2_n), color=aprimecolor, size=1.25) +
annotate("text", x=2, y=G_vals2_n[length(G_vals2_n)] + tick, label=TeX("$G(\\tau_i | a`)$"), family="Palatino", color=aprimecolor) +
scale_x_continuous(limits=c(1, tau_i[length(tau_i)] + tick / 2), breaks=c(1, tauStar1, tauStar2), labels=c(1, TeX("$\\tau_i^{*}(a)$"), TeX("$\\tau_i^{*}(a`)$")))
Gplot <- Gplot3
